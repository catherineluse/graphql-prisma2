generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model Comment {
  authorHandle    String?
  createdAt       DateTime   @default(now())
  discussionId    Int
  id              Int        @default(autoincrement()) @id
  parentCommentId Int?
  text            String
  isRootComment   Boolean
  User            User?      @relation(fields: [authorHandle], references: [handle])
  Discussion      Discussion @relation(fields: [discussionId], references: [id])
  parentComment   Comment?   @relation("CommentToComment_id", fields: [parentCommentId], references: [id])
  childComment    Comment[]  @relation("CommentToComment_id")
}

model Community {
  createdAt                DateTime                   @default(now())
  organizerHandle          String?
  description              String?
  id                       Int                        @default(autoincrement()) @id
  name                     String
  url                      String                     @unique
  Organizer                User?                      @relation("OrganizersOfCommunities", fields: [organizerHandle], references: [handle])
  Subscribers              User[]                     @relation("SubscribersOfCommunities", references: [id])
  Discussion               Discussion[]
  SubscribersOfCommunities SubscribersOfCommunities[]
  OrganizersOfCommunities  OrganizersOfCommunities[]
}

model Discussion {
  authorHandle String
  body         String?
  communityUrl String
  createdAt    DateTime  @default(now())
  id           Int       @default(autoincrement()) @id
  title        String
  User         User      @relation(fields: [authorHandle], references: [handle])
  Community    Community @relation(fields: [communityUrl], references: [url])
  Comment      Comment[]
}

model Message {
  authorHandle         String
  createdAt            DateTime               @default(now())
  id                   Int                    @default(autoincrement()) @id
  recipientHandle      String
  text                 String
  Author               User                   @relation("AuthorsOfMessages", fields: [authorHandle], references: [handle])
  Recipient            User                   @relation("RecipientsOfMessages", fields: [recipientHandle], references: [handle])
  AuthorsOfMessages    AuthorsOfMessages[]
  RecipientsOfMessages RecipientsOfMessages[]
}

model User {
  id                       Int                        @default(autoincrement()) @id
  age                      Int?
  createdAt                DateTime                   @default(now())
  email                    String                     @unique
  name                     String
  handle                   String                     @unique
  Comment                  Comment[]
  OrganizerOfCommunities   Community[]                @relation("OrganizersOfCommunities")
  SubscriberOfCommunities  Community[]                @relation("SubscribersOfCommunities", references: [id])
  Discussion               Discussion[]
  SentMessages             Message[]                  @relation("AuthorsOfMessages")
  ReceivedMessages         Message[]                  @relation("RecipientsOfMessages")
  SubscribersOfCommunities SubscribersOfCommunities[]
  OrganizersOfCommunities  OrganizersOfCommunities[]
  AuthorsOfMessages        AuthorsOfMessages[]
  RecipientsOfMessages     RecipientsOfMessages[]
}

enum Role {
  ADMIN
  USER
}

model SubscribersOfCommunities {
  Community    Community @relation(fields: [communityUrl], references: [url])
  communityUrl String
  User         User      @relation(fields: [userHandle], references: [handle])
  userHandle   String
  createdAt    DateTime  @default(now())
  @@id([communityUrl, userHandle])
}

model OrganizersOfCommunities {
  Community    Community @relation(fields: [communityUrl], references: [url])
  communityUrl String
  User         User      @relation(fields: [userHandle], references: [handle])
  userHandle   String
  createdAt    DateTime  @default(now())
  @@id([communityUrl, userHandle])
}

model AuthorsOfMessages {
  Message    Message  @relation(fields: [messageId], references: [id])
  messageId  Int
  User       User     @relation(fields: [userHandle], references: [handle])
  userHandle String
  createdAt  DateTime @default(now())
  @@id([messageId, userHandle])
}

model RecipientsOfMessages {
  Message    Message  @relation(fields: [messageId], references: [id])
  messageId  Int
  User       User     @relation(fields: [userHandle], references: [handle])
  userHandle String
  createdAt  DateTime @default(now())
  @@id([messageId, userHandle])
}
